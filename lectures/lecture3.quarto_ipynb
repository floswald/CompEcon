{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Lecture 3: Optimization 1\"\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Creating a Julia Package for your work\n",
        "\n",
        "* Creating a package is a great way to ensure reproducibility of your work.\n",
        "* It helps to make your work shareable.\n",
        "* It helps to test the code which makes up your work.\n",
        "* ðŸ‘‰ Let's do it!\n",
        "\n",
        "## Cookbook\n",
        "\n",
        "1. Start `julia`\n",
        "2. two equivalent options:\n",
        "   1. enter `Pkg` mode (hit `]`), then `generate path/to/new/package`, or\n",
        "   2. say `using Pkg`, then `Pkg.generate(\"path/to/new/package\")`\n",
        "\n",
        "Here is an example:\n",
        "\n",
        "```julia\n",
        "\n",
        "]    # this jumps into Pkg mode\n",
        "\n",
        "(@v1.11) pkg> generate CCApackage\n",
        "  Generating  project CCApackage:\n",
        "    CCApackage/Project.toml\n",
        "    CCApackage/src/CCApackage.jl\n",
        "\n",
        "(@v1.11) pkg> \n",
        "\n",
        "```\n",
        "\n",
        "Depending on where you started your julia session, there is now a new folder `CCApackage`:\n",
        "\n",
        "```julia\n",
        "shell> ls CCApackage/\n",
        "Project.toml  src/\n",
        "```\n",
        "\n",
        "It's a good idea to start a new VSCode window at that folder location. Doing so, you would see this:\n",
        "\n",
        "![Our julia package](images/cca-package.png)\n",
        "\n",
        "* great. Start a julia repl in the usual way. \n",
        "* Notice how the bottom bar in VSCode keeps indicating the *global* julia environment (`v1.11` for me currently). Given that we have *not* installed this package via `add` into the global env, we cannot use it. To see this, just try to load our package like this:\n",
        "\n",
        "```julia\n",
        "julia> using CCApackage\n",
        "ERROR: ArgumentError: Package CCApackage not found in current path.\n",
        "- Run `import Pkg; Pkg.add(\"CCApackage\")` to install the CCApackage package.\n",
        "```\n",
        "\n",
        "* We need to switch into the *environment* of this package before we can load it locally. This is called *activate* an environment:\n",
        "\n",
        "```julia\n",
        "]  # in Pkg mode\n",
        "(@v1.11) pkg> activate .  # `.` for current directory\n",
        "  Activating project at `~/CCApackage`\n",
        "\n",
        "(CCApackage) pkg>  # hit backspace\n",
        "\n",
        "julia> using CCApackage\n",
        "[ Info: Precompiling CCApackage [c4d85591-a952-48fb-b3d1-49a9454516b2] \n",
        "\n",
        "```\n",
        "\n",
        "OK! That worked! Great, now we can use the functions contained in the package. Let's see:\n",
        "\n",
        "```julia\n",
        "julia> CCApackage.greet()\n",
        "Hello World!\n",
        "```\n",
        "\n",
        "::: {.callout-note}\n",
        "# Code Loading\n",
        "\n",
        "Notice how we did not have to say *run current file in REPL* or similar commands. Saying `using CCApackage` immediately made our code available in the current session.\n",
        ":::\n",
        "\n",
        "Next question: How can we now work on the code and investigate it's changes in the REPL? \n",
        "\n",
        "1. We can obviously execute the current file in the REPL (basically copy and paste the code into the REPL). But that's cumbersome.\n",
        "2. There is a great alternative - `Revise.jl`.\n"
      ],
      "id": "8692f840"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "using Pkg\n",
        "Pkg.generate(\"\")\n",
        "\n",
        "\n",
        "   \n",
        "```julia\n",
        "]\n",
        "(@v1.8) pkg> add PkgTemplates\n",
        "\n",
        "julia> using PkgTemplates\n",
        "\n",
        "help?> Template\n",
        "\n",
        "julia> t = Template(user = \"floswald\", interactive = true)\n",
        "Template keywords to customize:\n",
        "[press: d=done, a=all, n=none]\n",
        "   [ ] authors\n",
        "   [ ] dir\n",
        "   [ ] host\n",
        "   [ ] julia\n",
        " > [ ] plugins\n",
        "\n",
        "julia> t(\"MyNewPackage\")\n",
        "[ Info: Running prehooks\n",
        "[ Info: Running hooks\n",
        "...suppressed output...\n",
        "[ Info: New package is at /Users/74097/.julia/dev/MyNewPackage"
      ],
      "id": "ac39265d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* Great! Now let's open VSCode in that location and make some changes.\n",
        "\n",
        "```julia\n",
        "module MyNewPackage\n",
        "\n",
        "mutable struct MPoint\n",
        "    x::Number\n",
        "    y::Number\n",
        "end\n",
        "\n",
        "import Base.:+\n",
        "\n",
        "+(a::MPoint,b::MPoint) = MPoint(a.x + b.x, a.y + b.y)\n",
        "\n",
        "end   # module\n",
        "```\n",
        "\n",
        "* Now, we could just `execute active file in REPL` in VSCode, or indeed, type in the REPL `include(\"src/MyNewPackage.jl\")`:\n",
        "\n",
        "```julia\n",
        "julia> include(\"src/MyNewPackage.jl\")\n",
        "Main.MyNewPackage\n",
        "```\n",
        "\n",
        "* Now we can test the code in the REPL. \n",
        "* Notice, **importantly**, each time you want to see the effects of changing your code, you have to **replace the module** via `include(\"src/MyNewPackage.jl\")`.\n",
        "\n",
        "```julia\n",
        "julia> include(\"src/MyNewPackage.jl\")\n",
        "WARNING: replacing module MyNewPackage.\n",
        "```\n",
        "\n",
        "* Let's add a test for our `+` method in the `test` folder:\n",
        "\n",
        "```julia\n",
        "@testset \"MyNewPackage.jl\" begin\n",
        "    a = MyNewPackage.MPoint(3,5)\n",
        "    b = MyNewPackage.MPoint(1,2)\n",
        "    @test a + b isa MyNewPackage.MPoint\n",
        "    p = a + b\n",
        "    @test p.x == a.x + b.x\n",
        "    @test p.y == a.y + b.y\n",
        "end\n",
        "```\n",
        "\n",
        "* Run the tests from REPL in Pkg mode: `]; test`\n",
        "* This *works*, but it involves one extra step that we need to do manually. Small steps add up! So let's try to improve on that.\n",
        "* Let's tell the package to add `Revise.jl`: `]; add Revise`. \n",
        "* Shut down and restart VScode in same folder.\n",
        "* **Before** anything else, type `using Revise`. Then type `using MyNewPackage`.\n",
        "* Let's add a new function now. \n",
        "\n",
        "```julia\n",
        "-(a::MPoint,b::MPoint) = MPoint(a.x - b.x, a.y - b.y)\n",
        "```\n",
        "\n",
        "* *Don't* replace the module via `include(\"src/MyNewPackage.jl\")`. Instead, just save the file and go back to REPL.\n",
        "  \n",
        "```julia\n",
        "julia> a = MyNewPackage.MPoint(3,4)\n",
        "MyNewPackage.MPoint(3, 4)\n",
        "\n",
        "julia> b = MyNewPackage.MPoint(99,100)\n",
        "MyNewPackage.MPoint(99, 100)\n",
        "\n",
        "julia> a - b\n",
        "MyNewPackage.MPoint(-96, -96)\n",
        "```\n",
        "\n",
        "* ðŸŽ‰\n",
        "\n",
        "### Debugging A Package\n",
        "\n",
        "* Debugging simple scripts or packages is the same workflow. \n",
        "* Let's add another function. An _economic model_ of sorts:\n",
        "\n",
        "```julia\n",
        "function econ_model(; startval = 1.0)\n",
        "    # make an Mpoint\n",
        "    x = MPoint(startval, startval-0.5)\n",
        "    # ... and evaluate a utility function\n",
        "    MPoint(log(x.x),log(x.y))\n",
        "end\n",
        "```\n",
        "\n",
        "* Make sure to try out that it works.\n",
        "\n",
        "```julia\n",
        "julia> MyNewPackage.econ_model()\n",
        "MyNewPackage.MPoint(0.0, -0.6931471805599453)\n",
        "```\n",
        "\n",
        "* Ok great. Now what about that? Try it out!\n",
        "\n",
        "```julia\n",
        "julia> MyNewPackage.econ_model(startval = 0.3)\n",
        "```\n",
        "\n",
        "* Good. Let's pretend we don't know what's going on and we need to investigate this function.\n",
        "\n",
        "1. Add `println` statements.\n",
        "2. Add `@debug` statements. then attaching a logger with \n",
        "\n",
        "```julia\n",
        "using Logging\n",
        "debug_logger = ConsoleLogger(stdout, Logging.Debug)\n",
        "global_logger(debug_logger)  # turns on logging of @debug messages\n",
        "```\n",
        "\n",
        "3. Use an actual debugger to step through our code.\n",
        "   1. `VSCode` exports by default the `@enter` macro. type: `@enter MyNewPackage.econ_model(startval = -0.3)`\n",
        "   2. click on teh play symbol. program hits an error. \n",
        "   3. set a break point just before\n",
        "   4. click on `replay`.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Some Julia-Bootcamp stuff\n",
        "\n",
        "Topic | Notebook\n",
        ":-----: | :--------:\n",
        "Intro to Macros | [click for notebook](https://floswald.github.io/julia-bootcamp/10-intro-to-macros.html)\n",
        "Intro to Differential Equations | [click for notebook](https://floswald.github.io/julia-bootcamp/08-popgrowth.html)\n",
        "Plotting with Plots.jl | [click for notebook](https://floswald.github.io/julia-bootcamp/06-plotting.html)\n",
        "Plotting with Makie.jl | [click for website](plotting.qmd)\n",
        "Interactive | [click for notebook](https://floswald.github.io/julia-bootcamp/07-interactive.html)\n",
        "\n",
        "\n",
        "\n",
        "## Optimization, Finally!\n",
        "\n",
        "Topic | Notebook\n",
        ":-----: | :--------:\n",
        "Review of Optimization Algorithms | [download notebook](https://raw.githubusercontent.com/floswald/CompEcon/refs/heads/main/notebooks/week3/optimization1.jl)"
      ],
      "id": "85f2754b"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "julia-1.11",
      "language": "julia",
      "display_name": "Julia 1.11.0",
      "path": "/Users/floswald/Library/Jupyter/kernels/julia-1.11"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}